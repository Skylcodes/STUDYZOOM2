generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id(map: "PK_Account") @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "IX_Account_userId")
}

model AuthenticatorApp {
  id            String   @id(map: "PK_AuthenticatorApp") @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  accountName   String   @db.VarChar(255)
  issuer        String   @db.VarChar(255)
  secret        String   @db.VarChar(255)
  recoveryCodes String   @db.VarChar(1024)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_AuthenticatorApp_userId")
}

model ChangeEmailRequest {
  id        String   @id(map: "PK_ChangeEmailRequest") @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  email     String
  expires   DateTime
  valid     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_ChangeEmailRequest_userId")
}

model Feedback {
  id             String           @id(map: "PK_Feedback") @default(uuid()) @db.Uuid
  userId         String           @db.Uuid
  category       FeedbackCategory @default(SUGGESTION)
  message        String           @db.VarChar(4000)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_Feedback_userId")
}

model Notification {
  id        String    @id(map: "PK_Notification") @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  title     String    @db.VarChar(255)
  message   String    @db.VarChar(4000)
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_Notification_userId")
}

model ResetPasswordRequest {
  id        String   @id(map: "PK_ResetPasswordRequest") @default(uuid()) @db.Uuid
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "IX_ResetPasswordRequest_email")
}

model Session {
  id           String   @id(map: "PK_Session") @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_Session_userId")
}

model User {
  id                           String               @id(map: "PK_User") @default(uuid()) @db.Uuid
  image                        String?              @db.VarChar(2048)
  name                         String               @db.VarChar(64)
  email                        String?              @unique
  emailVerified                DateTime?
  password                     String?              @db.VarChar(60)
  lastLogin                    DateTime?
  role                         Role                 @default(STUDENT)
  phone                        String?              @db.VarChar(32)
  locale                       String               @default("en-US") @db.VarChar(8)
  completedOnboarding          Boolean              @default(false)
  enabledWeeklySummary         Boolean              @default(false)
  enabledNewsletter            Boolean              @default(false)
  enabledProductUpdates        Boolean              @default(false)
  studyGroupId                 String?              @db.Uuid
  organizationId               String?              @db.Uuid // Keeping for backward compatibility
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  accounts                     Account[]
  authenticatorApp             AuthenticatorApp?
  changeEmailRequests          ChangeEmailRequest[]
  feedback                     Feedback[]
  notifications                Notification[]
  sessions                     Session[]
  studySets                    StudySet[]
  categories                   Category[]
  studyGroup                   StudyGroup?          @relation(fields: [studyGroupId], references: [id])
  studyGroupInvites            StudyGroupInvite[]
  actionItems                  ActionItem[]
  contacts                     Contact[]
  securityAuditLogs            SecurityAuditLog[]
}

model UserImage {
  id          String  @id(map: "PK_UserImage") @default(uuid()) @db.Uuid
  userId      String  @db.Uuid
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)

  @@index([userId], map: "IX_UserImage_userId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  userData   String?  @db.Text  // Store serialized user data for deferred account creation

  @@unique([identifier, token])
}

enum FeedbackCategory {
  SUGGESTION @map("suggestion")
  PROBLEM    @map("problem")
  QUESTION   @map("question")
}

enum Role {
  STUDENT @map("student")
  INSTRUCTOR @map("instructor")
  MEMBER @map("member")
  ADMIN  @map("admin")
}

model Category {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  userId      String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySets   StudySet[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

// Renamed from Document to StudySet for better domain alignment
model StudySet {
  id          String    @id @default(uuid()) @db.Uuid @map("Document")
  title       String
  filePath    String?
  fileType    String?   // MIME type of the uploaded file
  fileSize    Int?      // Size in bytes
  content     Json?     // For storing extracted text or other data
  notes       String?   @db.Text // User's personal notes on the document
  uploadDate  DateTime  @default(now())
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?   @db.Uuid
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  topicTags   TopicTag[] @relation("StudySetToTopicTag")
  actionItems ActionItem[]
  
  // AI-generated content
  flashcards  Json?     // Array of flashcard objects
  quiz        Json?     // Quiz questions and answers
  summary     String?   @db.Text // AI-generated summary
  podcast     String?   // URL to generated audio file
  generatedAt DateTime? // When AI content was last generated
  
  // Related materials
  studyMaterials StudyMaterial[]

  @@index([userId])
  @@index([categoryId])
}

// Renamed from ContactTag to TopicTag
model TopicTag {
  id          String     @id @default(uuid()) @db.Uuid @map("ContactTag")
  name        String
  color       String?    // For UI display
  userId      String     @db.Uuid
  studySets   StudySet[] @relation("StudySetToTopicTag")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

// Renamed from ContactTask to ActionItem
model ActionItem {
  id          String          @id @default(uuid()) @db.Uuid @map("ContactTask")
  title       String
  description String?
  dueDate     DateTime?
  status      ActionItemStatus @default(TODO)
  userId      String          @db.Uuid
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySetId  String?         @db.Uuid
  studySet    StudySet?       @relation(fields: [studySetId], references: [id], onDelete: SetNull)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId])
  @@index([studySetId])
}

// Renamed from Organization to StudyGroup
model StudyGroup {
  id          String            @id @default(uuid()) @db.Uuid @map("Organization")
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  members     User[]
  invites     StudyGroupInvite[]

  @@index([name])
}

// Renamed from Invitation to StudyGroupInvite
model StudyGroupInvite {
  id           String             @id @default(uuid()) @db.Uuid @map("Invitation")
  email        String
  name         String?
  token        String             @unique
  status       InviteStatus       @default(PENDING)
  role         Role               @default(STUDENT)
  expires      DateTime
  studyGroupId String             @db.Uuid
  studyGroup   StudyGroup         @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  userId       String?            @db.Uuid
  user         User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@index([studyGroupId])
  @@index([userId])
  @@index([email])
  @@index([token])
}

// New enums for STUDYZOOM domain
enum ActionItemStatus {
  TODO        @map("todo")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  REVIEW      @map("review")
}

enum InviteStatus {
  PENDING   @map("pending")
  ACCEPTED  @map("accepted")
  DECLINED  @map("declined")
  REVOKED   @map("revoked")
  EXPIRED   @map("expired")
}

enum DocumentType {
  NOTE       @map("note")
  SLIDES     @map("slides")
  ASSIGNMENT @map("assignment")
  FLASHCARD  @map("flashcard")
  QUIZ       @map("quiz")
}

// Security audit log for tracking security-related events
model SecurityAuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  action       String   // e.g., "access", "modify", "delete"
  resourceType String   // e.g., "document", "flashcardSet", "quiz"
  resourceId   String   // ID of the accessed resource
  success      Boolean  // Whether the access was successful
  details      String?  // JSON string with additional details
  timestamp    DateTime // When the event occurred
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "security_audit_user_idx")
  @@index([resourceType, resourceId], name: "security_audit_resource_idx")
  @@index([timestamp], name: "security_audit_timestamp_idx")
  @@index([success], name: "security_audit_success_idx")
}

// Contact model for storing user contacts/study partners
model Contact {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @db.Uuid
  name        String        @db.VarChar(255)
  email       String?       @db.VarChar(255)
  phone       String?       @db.VarChar(32)
  notes       String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  image       ContactImage?

  @@index([userId])
}

// ContactImage model for storing contact profile images
model ContactImage {
  id          String   @id @default(uuid()) @db.Uuid
  contactId   String   @unique @db.Uuid
  data        Bytes?
  contentType String?  @db.VarChar(255)
  hash        String?  @db.VarChar(64)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// StudyMaterial model for storing uploaded study materials
model StudyMaterial {
  id          String   @id @default(uuid()) @db.Uuid
  studySetId  String   @db.Uuid
  fileName    String   @db.VarChar(255)
  fileSize    Int
  contentType String   @db.VarChar(255)
  data        Bytes
  hash        String?  @db.VarChar(64)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studySet    StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)

  @@index([studySetId])
  @@index([hash])
}
